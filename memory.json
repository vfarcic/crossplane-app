{"type":"entity","name":"crossplane-app","observations":["Contains demo manifests and code for DevOps Toolkit videos.","Focuses on Crossplane.","After modifying Compositions (which are defined in KCL and result in YAML files like `package/backend.yaml`), always check if `package/definition.yaml` (the CompositeResourceDefinition - XRD) needs to be updated to reflect any schema changes in the Composition.","The `spec.package` field in `config.yaml` (e.g., `xpkg.upbound.io/devops-toolkit/dot-application:vX.Y.Z`) is automatically updated by a GitHub Actions workflow during the release process. Do not manually edit this version; changes to `.semver.yaml` are likely the correct way to influence the next version set by CI."],"entityType":"SoftwareProject"}
{"type":"entity","name":"application.xpkg","observations":["Is a Crossplane package.","Generated from1 KCL files in `kcl/`.","Packaged into `package/application.xpkg`.","Published to `xpkg.upbound.io`.","Configuration is in `config.yaml`."],"entityType":"CrossplaneArtifact"}
{"type":"entity","observations":["Used to generate YAML manifests for the Crossplane package.","KCL files are located in the `kcl/` directory.","Output YAMLs are placed in the `package/` directory."],"entityType":"TemplatingLanguage","name":"KCL"}
{"type":"entity","name":"Chainsaw","observations":["Used for testing the Crossplane package.","Test definitions are likely in the `tests/` directory."],"entityType":"TestingTool"}
{"type":"entity","entityType":"DevelopmentEnvironment","observations":["Used for creating a local Kubernetes cluster for testing.","Cluster configuration might be in `kind.yaml`."],"name":"Kind"}
{"type":"entity","observations":["Used to manage the development environment.","Configuration is in `devbox.json`."],"name":"Devbox","entityType":"DevelopmentEnvironmentTool"}
{"type":"entity","entityType":"BuildTool","name":"Taskfile","observations":["Used as a task runner, similar to Make.","Defines tasks for packaging, testing, and cluster management.","Configuration is in `Taskfile.yaml`."]}
{"type":"entity","entityType":"CommandLineInterface","observations":["Referred to as `up` in `Taskfile.yaml`.","Used for logging in to Upbound, building, and pushing Crossplane packages."],"name":"Upbound CLI"}
{"type":"entity","name":"Helm","observations":["Used to install Crossplane.","Used to install External Secrets."],"entityType":"PackageManageme_tool"}
{"type":"entity","entityType":"KubernetesTool","name":"External Secrets","observations":["Installed into the Kind cluster via Helm.","Used for managing secrets in Kubernetes."]}
{"type":"entity","observations":["When the user indicates 'we are done' or similar, and if the current Git branch is 'main', the assistant should propose the following workflow: 1. Create a new branch. 2. Push all committed changes to this new branch. 3. Create a Pull Request (PR) from the new branch to the 'main' branch. 4. Merge the PR into the 'main' branch.","Before suggesting a commit and push as part of the end-of-task workflow: 1. Run `git status --short` to list all modified, added (new), and deleted files. 2. Present this list to the user. 3. Ask the user to confirm these are the changes they want to include. 4. Based on confirmation, suggest `git add <specific files>` or `git add .` to stage all confirmed changes. 5. Then suggest `git commit`. 6. Only after a successful commit, proceed with suggesting `git push` and PR creation."],"name":"EndOfTaskGitWorkflow","entityType":"UserWorkflowPreference"}
{"type":"entity","entityType":"CommandLineInterface","name":"GitHub CLI (gh)","observations":["Can be used to interact with GitHub repositories.","Useful for tasks like creating pull requests, managing issues, and other GitHub-related operations directly from the command line.","This capability can be leveraged to automate parts of the PR creation process if available and authorized."]}
{"type":"entity","observations":["When creating a file to be used as the body for a GitHub PR (e.g., with `gh pr create --body-file` or `gh pr edit --body-file`), ensure that line breaks are represented by actual newline characters in the file. Do not use literal escape sequences like `\\n`, as these will be rendered as the characters `\\` and `n` rather than creating a line break in the final PR description."],"entityType":"BestPractice","name":"PRBodyFileFormatting"}
{"type":"entity","observations":["After a Pull Request has been successfully created, remind the user to request a code review from GitHub Copilot. This reminder should clarify that the review is typically initiated via the 'Reviewers' menu on the Pull Request page in the GitHub UI by selecting 'Copilot', rather than by trying to add 'Copilot' as a standard GitHub user reviewer via CLI or other means.","After a Pull Request has been successfully created, first remind the user to request a code review from GitHub Copilot via the 'Reviewers' menu on the PR page in the GitHub UI. After this reminder, and once the user indicates the review has been initiated or sufficient time has passed, suggest using `gh pr view <PR_NUMBER> --comments | cat` to fetch and display Copilot's (and other) review comments.","User has configured GitHub Copilot to automatically review all pull requests. Therefore, after a PR is created, the assistant should *not* remind the user to manually add Copilot as a reviewer. Instead, after a short delay (to allow Copilot time to perform the automatic review), the assistant should directly suggest using `gh pr view <PR_NUMBER> --comments | cat` to fetch and display Copilot's (and other) review comments."],"entityType":"UserInstruction","name":"PostPRCreationCopilotReviewReminder"}
{"type":"entity","name":"PostPRMergeActionMonitoring","observations":["After a Pull Request is merged, the assistant should monitor the GitHub Actions workflows that are triggered as a result of the merge. If any errors are detected in these workflows, the user should be notified. This monitoring will likely involve using `gh run list` or `gh workflow view` commands with appropriate filters for the relevant branch and commit."],"entityType":"UserInstruction"}
{"type":"relation","relationType":"uses","from":"crossplane-app","to":"application.xpkg"}
{"type":"relation","from":"crossplane-app","relationType":"uses","to":"KCL"}
{"type":"relation","from":"crossplane-app","to":"Chainsaw","relationType":"uses"}
{"type":"relation","to":"Kind","from":"crossplane-app","relationType":"uses"}
{"type":"relation","from":"crossplane-app","relationType":"uses","to":"Devbox"}
{"type":"relation","from":"crossplane-app","to":"Taskfile","relationType":"uses"}
{"type":"relation","from":"crossplane-app","to":"Upbound CLI","relationType":"uses"}
{"type":"relation","to":"Helm","from":"crossplane-app","relationType":"uses"}
{"type":"relation","relationType":"uses","from":"crossplane-app","to":"External Secrets"}
{"type":"relation","relationType":"generatedBy","to":"KCL","from":"application.xpkg"}
{"type":"relation","relationType":"managedBy","from":"application.xpkg","to":"Upbound CLI"}
{"type":"relation","from":"Taskfile","to":"KCL","relationType":"orchestrates"}
{"type":"relation","to":"Chainsaw","from":"Taskfile","relationType":"orchestrates"}
{"type":"relation","to":"Kind","relationType":"orchestrates","from":"Taskfile"}
{"type":"relation","to":"Upbound CLI","from":"Taskfile","relationType":"orchestrates"}
{"type":"relation","relationType":"orchestrates","to":"Helm","from":"Taskfile"}
{"type":"relation","relationType":"testsOn","from":"Chainsaw","to":"Kind"}
{"type":"relation","to":"External Secrets","relationType":"deploys","from":"Helm"}