apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: app-backend
  labels:
    type: backend
    location: local
spec:
  compositeTypeRef:
    apiVersion: devopstoolkitseries.com/v1alpha1
    kind: App
  patchSets:
  - name: metadata
    patches:
    - fromFieldPath: metadata.labels
  mode: Pipeline
  pipeline:
  - step: kcl
    functionRef:
      name: crossplane-contrib-function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      metadata:
        name: kubernetes
      spec:
        target: Default
        source: |+
          oxr = option("params").oxr
          _id = oxr.spec.id
          _params = oxr.spec.parameters
          dxr = {
              **oxr
              status.host = _params.host
          }

          schema providerConfig:
              _apiVersion: str
              _suffix: str
              apiVersion = _apiVersion
              kind = "ProviderConfig"
              metadata = {
                  name = _id + "-app"
                  annotations = {
                      "krm.kcl.dev/ready" = "True"
                      "krm.kcl.dev/composition-resource-name" = _id + "-provider-config-" + _suffix
                  }
              }
              spec = {
                  credentials.source = "InjectedIdentity"
              }

          _items = [
              providerConfig {
                  _apiVersion = "kubernetes.crossplane.io/v1alpha1"
                  _suffix = "kubernetes"
              } , {
                  apiVersion = "kubernetes.crossplane.io/v1alpha1"
                  kind = "Object"
                  metadata.name = "{}-deployment".format(_id)
                  spec = {
                      forProvider.manifest = {
                          apiVersion = "apps/v1"
                          kind = "Deployment"
                          metadata = {
                              name = _id
                              namespace = _params.namespace
                              labels = {
                                  "app.kubernetes.io/name" = _id
                              }
                          }
                          spec = {
                              selector.matchLabels = {
                                  "app.kubernetes.io/name" = _id
                              }
                              template = {
                                  metadata.labels = {
                                      "app.kubernetes.io/name" = _id
                                  }
                                  spec = {
                                      containers = [{
                                          image = _params.image + ":" + _params.tag
                                          name = "backend"
                                          ports = [{containerPort = 80 }]
                                          livenessProbe = {
                                              httpGet = {
                                                  path = "/"
                                                  port = _params.port
                                              }
                                          }
                                          readinessProbe = {
                                              httpGet = {
                                                  path = "/"
                                                  port = _params.port
                                              }
                                          }
                                          resources = {
                                              limits = {cpu = "250m", memory = "256Mi" }
                                              requests = {cpu = "125m", memory = "128Mi" }
                                          }
                                          ports = [
                                              {containerPort = _params.port }
                                          ]
                                          if _params.db?.secret:
                                              env = [
                                                  {
                                                      name = "DB_ENDPOINT"
                                                      valueFrom.secretKeyRef = {
                                                          key = "endpoint"
                                                          name = _params.db.secret
                                                      }
                                                  }, {
                                                      name = "DB_PASSWORD"
                                                      valueFrom.secretKeyRef = {
                                                          key = "password"
                                                          name = _params.db.secret
                                                      }
                                                  }, {
                                                      name = "DB_PORT"
                                                      valueFrom.secretKeyRef = {
                                                          key = "port"
                                                          name = _params.db.secret
                                                          optional = True
                                                      }
                                                  }, {
                                                      name = "DB_USERNAME"
                                                      valueFrom.secretKeyRef = {
                                                          key = "username"
                                                          name = _params.db.secret
                                                      }
                                                  }, {
                                                      name = "DB_NAME"
                                                      value = _id
                                                  },
                                              ]
                                      }]
                                  }
                              }
                          }
                      }
                      providerConfigRef.name = _id + "-app"
                  }
              }, {
                  apiVersion = "kubernetes.crossplane.io/v1alpha1"
                  kind = "Object"
                  metadata.name = "{}-service".format(_id)
                  spec = {
                      forProvider.manifest = {
                          apiVersion = "v1"
                          kind = "Service"
                          metadata = {
                              name = _id
                              namespace = _params.namespace
                              labels = {
                                  "app.kubernetes.io/name" = _id
                              }
                          }
                          spec = {
                              type = "ClusterIP"
                              ports = [{
                                  port = _params.port
                                  targetPort = _params.port
                                  protocol = "TCP"
                                  name = "http"
                              }]
                              selector = {
                                  "app.kubernetes.io/name" = _id
                              }
                          }
                      }
                      providerConfigRef.name = _id + "-app"
                  }
              }, {
                  apiVersion = "kubernetes.crossplane.io/v1alpha1"
                  kind = "Object"
                  metadata.name = "{}-ingress".format(_id)
                  spec = {
                      forProvider.manifest = {
                          apiVersion = "networking.k8s.io/v1"
                          kind = "Ingress"
                          metadata = {
                              name = _id
                              namespace = _params.namespace
                              labels = {
                                  "app.kubernetes.io/name" = _id
                              }
                              annotations = {"ingress.kubernetes.io/ssl-redirect" = "false" }
                          }
                          spec = {
                              if _params.ingressClassName:
                                  ingressClassName = _params.ingressClassName
                              rules = [{
                                  host = _params.host
                                  http = {
                                      paths = [{
                                          path = "/"
                                          pathType = "ImplementationSpecific"
                                          backend.service = {
                                              name = _id
                                              port.number = _params.port
                                          }
                                      }]
                                  }
                              }]
                          }
                      }
                      providerConfigRef.name = _id + "-app"
                  }
              }
          ]

          if _params.scaling?.enabled:
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha1"
                  kind = "Object"
                  metadata.name = "{}-hpa".format(_id)
                  spec = {
                      forProvider.manifest = {
                          apiVersion = "autoscaling/v2"
                          kind = "HorizontalPodAutoscaler"
                          metadata = {
                              name = _id
                              namespace = _params.namespace
                              labels = {
                                  "app.kubernetes.io/name" = _id
                              }
                          }
                          spec = {
                              scaleTargetRef = {
                                  apiVersion = "apps/v1"
                                  kind = "Deployment"
                                  name = _id
                              }
                              minReplicas = _params.scaling.min
                              maxReplicas = _params.scaling.max
                              metrics = [{
                                  type = "Resource"
                                  resource = {
                                      name = "cpu"
                                      target = {
                                          type = "Utilization"
                                          averageUtilization = 80
                                      }
                                  }
                              }, {
                                  type = "Resource"
                                  resource = {
                                      name = "memory"
                                      target = {
                                          type = "Utilization"
                                          averageUtilization = 80
                                      }
                                  }
                              }]
                          }
                      }
                      providerConfigRef.name = _id + "-app"
                  }
              }]

          items = _items

  - step: kcl-ci
    functionRef:
      name: crossplane-contrib-function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      metadata:
        name: kubernetes
      spec:
        target: Default
        source: "oxr = option(\"params\").oxr\n_id = oxr.spec.id\n_params = oxr.spec.parameters\ndxr = {\n    **oxr\n    status.host = _params.host\n}\n\n_metadata = lambda suffix: str, kind: str -> any {\n    {\n        if suffix == \"\":\n            name = _id\n            annotations = {\n                \"krm.kcl.dev/composition-resource-name\" = _id + \"-\" + kind\n            }\n        else:\n            name = _id + \"-\" + kind + \"-\" + suffix\n            annotations = {\n                \"krm.kcl.dev/composition-resource-name\" = _id + \"-\" + kind + \"-\" + suffix\n            }\n    }\n}\n\n_devboxRun = \"devbox run --config devbox-ci.json -- ./dot.nu run ci $TAG\"\n\nif not _params.ci?.runTests:\n    _devboxRun = _devboxRun + \" --run_tests false\"\nif not _params.ci?.buildImages:\n    _devboxRun = _devboxRun + \" --build_images false\"\n        \n_items = []\n\nif _params.ci?.enabled and _params.repository?.enabled and _params.repository?.name:\n    _items += [{\n        apiVersion = \"repo.github.upbound.io/v1alpha1\"\n        kind = \"Branch\"\n        metadata = _metadata(\"ci\", \"branch\")\n        spec.forProvider = {\n            branch = \"ci\"\n            repository = _params.repository.name\n        }\n    }, {\n        apiVersion = \"repo.github.upbound.io/v1alpha1\"\n        kind = \"RepositoryFile\"\n        metadata = _metadata(\"gha\", \"file\")\n        spec.forProvider = {\n            branch = \"ci\"\n            commitAuthor = \"Crossplane\"\n            commitEmail = \"github-provider@crossplane.io\"\n            commitMessage = \"GitHub Actions [skip ci]\"\n            file = \".github/workflows/ci.yaml\"\n            repository = _params.repository.name\n            content = \"\"\"\\\nname: ci\nrun-name: ci\non:\n  push:\n    branches:\n      - main\njobs:\n  all:\n    runs-on: ubuntu-latest\n    env:\n      TAG: 0.1.$[[ github.run_number ]]\n      FORCE_COLOR: 1\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      - name: Login to ghcr\n        uses: docker/login-action@v3\n        with:\n          registry: ghcr.io\n          username: vfarcic\n          password: $[[ secrets.REGISTRY_PASSWORD ]]\n      - name: Install devbox\n        uses: jetify-com/devbox-install-action@v0.11.0\n        with:\n          project-path: devbox-ci.json\n      - name: Build and push\n        run: |\n          REPLACE_DEVBOX_RUN\n        env:\n          REGISTRY_PASSWORD: $[[ secrets.REGISTRY_PASSWORD ]]\n      - name: Commit changes\n        run: |\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .\n          git commit -m \"Release $[[ env.TAG ]] [skip ci]\"\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: $[[ secrets.GITHUB_TOKEN ]]\n          branch: $[[ github.ref ]]\n\"\"\".replace(\"[[\", \"{{\").replace(\"]]\", \"}}\").replace(\"REPLACE_DEVBOX_RUN\", _devboxRun)\n        }\n    }, {\n        apiVersion = \"repo.github.upbound.io/v1alpha1\"\n        kind = \"RepositoryFile\"\n        metadata = _metadata(\"dot-nu\", \"file\")\n        spec.forProvider = {\n            branch = \"ci\"\n            commitAuthor = \"Crossplane\"\n            commitEmail = \"github-provider@crossplane.io\"\n            commitMessage = \"dot.nu [skip ci]\"\n            file = \"dot.nu\"\n            repository = _params.repository.name\n            content = \"\"\"\\\n#!/usr/bin/env nu\n\ndef main [] {}\n\n# Runs all CI tasks\ndef \"main run ci\" [\n    tag: string           # The tag of the image (e.g., 0.0.1)\n    --run_tests = true    # Whether to run tests\n    --build_images = true # Whether to build images\n] {\n\n    if $run_tests {\n        main run tests --language go\n    }\n\n    if $build_images {\n        main build image $\"($TAG)\"\n    }\n\n    main update claim\n\n}\n\n# Runs tests\ndef \"main run tests\" [\n    --language = \"go\" # The language of the project (e.g., go)\n] {\n\n    if $language == \"go\" {\n        go test -v $\"(pwd)/...\"\n    }\n\n}\n\n# Builds and (optionally) pushes container images\ndef \"main build image\" [\n    tag: string   # The tag of the image (e.g., 0.0.1)\n    --push = true # Whether to push the image to the registry\n] {\n\n    docker image build --tag $\"REPLACE_IMAGE:latest\" .\n\n    docker image tag $\"REPLACE_IMAGE:latest\" $\"REPLACE_IMAGE:($tag)\"\n\n    if $push {\n\n        docker image push $\"REPLACE_IMAGE:latest\"\n\n        docker image push $\"REPLACE_IMAGE:($tag)\"\n    }\n\n}\n\n# Updates the claim\ndef \"main update claim\" [\n    tag: string  # The tag of the image (e.g., 0.0.1)\n    path: string # The path to the claim file\n] {\n\n    open $path | upsert spec.parameters.tag $tag | save $path --force\n\n}\n\"\"\".replace(\"REPLACE_IMAGE\", _params.image)\n        }\n    }, {\n        apiVersion = \"repo.github.upbound.io/v1alpha1\"\n        kind = \"RepositoryFile\"\n        metadata = _metadata(\"devbox\", \"file\")\n        spec.forProvider = {\n            branch = \"ci\"\n            commitAuthor = \"Crossplane\"\n            commitEmail = \"github-provider@crossplane.io\"\n            commitMessage = \"devbox-ci.json [skip ci]\"\n            file = \"devbox-ci.json\"\n            repository = _params.repository.name\n            content = \"\"\"\\\n{\n  \"packages\": [\n    \"nushell@0.100.0\",\n    \"go@1.22.3\"\n  ],\n  \"shell\": {\n    \"init_hook\": [\n      \"chmod +x dot.nu\"\n    ],\n    \"scripts\":   {}\n  }\n}\n\"\"\"\n        }\n    }, {\n        apiVersion = \"repo.github.upbound.io/v1alpha1\"\n        kind = \"RepositoryFile\"\n        metadata = _metadata(\"dockerfile\", \"file\")\n        spec.forProvider = {\n            branch = \"ci\"\n            commitAuthor = \"Crossplane\"\n            commitEmail = \"github-provider@crossplane.io\"\n            commitMessage = \"Dockerfile [skip ci]\"\n            file = \"Dockerfile\"\n            repository = _params.repository.name\n            content = \"\"\"\\\nFROM golang:1.23.3-alpine AS build\nRUN mkdir /src\nWORKDIR /src\nADD ./go.mod .\nADD ./go.sum .\nADD ./vendor .\nADD ./*.go ./\nRUN GOOS=linux GOARCH=amd64 go build -o app\nRUN chmod +x app\n\nFROM scratch\nARG VERSION\nENV VERSION=$VERSION\nENV DB_PORT=5432 DB_USERNAME=postgres DB_NAME=my-db\nCOPY --from=build /src/app /usr/local/bin/app\nEXPOSE 8080\nCMD [\"app\"]\n\"\"\"\n        }\n    }]\n\nitems = _items\n"
  - step: automatically-detect-ready-composed-resources
    functionRef:
      name: crossplane-contrib-function-auto-ready
