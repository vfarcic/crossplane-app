apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: app-backend
  labels:
    type: backend
    location: local
spec:
  compositeTypeRef:
    apiVersion: devopstoolkitseries.com/v1alpha1
    kind: App
  patchSets:
  - name: metadata
    patches:
    - fromFieldPath: metadata.labels
  mode: Pipeline
  pipeline:
  - step: kcl
    functionRef:
      name: crossplane-contrib-function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      metadata:
        name: kubernetes
      spec:
        target: Resources
        source: "oxr = option(\"params\").oxr\ndxr = {\n    **oxr\n    status.host = oxr.spec.parameters.host\n}\nitems = [\n    {\n        apiVersion = \"kubernetes.crossplane.io/v1alpha1\"\n        kind = \"ProviderConfig\"\n        metadata.name = oxr.spec.id\n        spec.credentials.source = \"InjectedIdentity\"\n    } , {\n        apiVersion = \"kubernetes.crossplane.io/v1alpha1\"\n        kind = \"Object\"\n        metadata.name = \"{}-deployment\".format(oxr.spec.id)        \n        spec = {\n            forProvider.manifest = {\n                apiVersion = \"apps/v1\"\n                kind = \"Deployment\"\n                metadata = {\n                    name = oxr.spec.id\n                    namespace = oxr.spec.parameters.namespace\n                    labels = {\n                        \"app.kubernetes.io/name\" = oxr.spec.id\n                        \"backstage.io/kubernetes-id\" = oxr.spec.id\n                    }\n                }\n                spec = {\n                    selector.matchLabels = {\n                        \"app.kubernetes.io/name\" = oxr.spec.id\n                    }\n                    template = {\n                        metadata.labels = {\n                            \"app.kubernetes.io/name\" = oxr.spec.id\n                            \"backstage.io/kubernetes-id\" = oxr.spec.id\n                        }\n                        spec = {\n                            containers = [{\n                                image = oxr.spec.parameters.image\n                                name = \"backend\"\n                                ports = [{containerPort = 80 }]\n                                livenessProbe = {\n                                    httpGet = {\n                                        path = \"/\"\n                                        port = oxr.spec.parameters.port\n                                    }\n                                }\n                                readinessProbe = {\n                                    httpGet = {\n                                        path = \"/\"\n                                        port = oxr.spec.parameters.port\n                                    }\n                                }\n                                resources = {\n                                    limits = {cpu = \"250m\", memory = \"256Mi\" }\n                                    requests = {cpu = \"125m\", memory = \"128Mi\" }\n                                }\n                                ports = [\n                                    {containerPort = oxr.spec.parameters.port }\n                                ]\n                                if oxr.spec.parameters?.db?.secret:\n                                    env = [\n                                        {\n                                            name = \"DB_ENDPOINT\"\n                                            valueFrom.secretKeyRef = {\n                                                key = \"endpoint\"\n                                                name = oxr.spec.parameters.db.secret\n                                            }\n                                        }, {\n                                            name = \"DB_PASSWORD\"\n                                            valueFrom.secretKeyRef = {\n                                                key = \"password\"\n                                                name = oxr.spec.parameters.db.secret\n                                            }\n                                        }, {\n                                            name = \"DB_PORT\"\n                                            valueFrom.secretKeyRef = {\n                                                key = \"port\"\n                                                name = oxr.spec.parameters.db.secret\n                                                optional = True\n                                            }\n                                        }, {\n                                            name = \"DB_USERNAME\"\n                                            valueFrom.secretKeyRef = {\n                                                key = \"username\"\n                                                name = oxr.spec.parameters.db.secret\n                                            }\n                                        }, {\n                                            name = \"DB_NAME\"\n                                            value = oxr.spec.id\n                                        },\n                                    ]\n                            }]\n                        }\n                    }\n                }\n            }\n            providerConfigRef.name = oxr.spec.id\n        }\n    }, {\n        apiVersion = \"kubernetes.crossplane.io/v1alpha1\"\n        kind = \"Object\"\n        metadata.name = \"{}-service\".format(oxr.spec.id)        \n        spec = {\n            forProvider.manifest = {\n                apiVersion = \"v1\"\n                kind = \"Service\"\n                metadata = {\n                    name = oxr.spec.id\n                    namespace = oxr.spec.parameters.namespace\n                    labels = {\n                        \"app.kubernetes.io/name\" = oxr.spec.id\n                        \"backstage.io/kubernetes-id\" = oxr.spec.id\n                    }\n                }\n                spec = {\n                    type = \"ClusterIP\"\n                    ports = [{\n                        port = oxr.spec.parameters.port\n                        targetPort = oxr.spec.parameters.port\n                        protocol = \"TCP\"\n                        name = \"http\"\n                    }]\n                    selector = {\n                        \"app.kubernetes.io/name\" = oxr.spec.id\n                    }\n                }\n            }\n            providerConfigRef.name = oxr.spec.id\n        }\n    }, {\n        apiVersion = \"kubernetes.crossplane.io/v1alpha1\"\n        kind = \"Object\"\n        metadata.name = \"{}-ingress\".format(oxr.spec.id)        \n        spec = {\n            forProvider.manifest = {\n                apiVersion = \"networking.k8s.io/v1\"\n                kind = \"Ingress\"\n                metadata = {\n                    name = oxr.spec.id\n                    namespace = oxr.spec.parameters.namespace\n                    labels = {\n                        \"app.kubernetes.io/name\" = oxr.spec.id\n                        \"backstage.io/kubernetes-id\" = oxr.spec.id\n                    }\n                    annotations = {\"ingress.kubernetes.io/ssl-redirect\" = \"false\" }\n                }\n                spec.rules = [{\n                    host = oxr.spec.parameters.host\n                    http = {\n                        paths = [{\n                            path = \"/\"\n                            pathType = \"ImplementationSpecific\"\n                            backend.service = {\n                                name = oxr.spec.id\n                                port.number = oxr.spec.parameters.port\n                            }\n                        }]\n                    }\n                }]\n            }\n            providerConfigRef.name = oxr.spec.id\n        }\n    }\n]\n"
  - step: automatically-detect-ready-composed-resources
    functionRef:
      name: crossplane-contrib-function-auto-ready
