apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: app-backend
  labels:
    type: backend
    location: local
spec:
  compositeTypeRef:
    apiVersion: devopstoolkit.live/v1alpha1
    kind: App
  patchSets:
  - name: metadata
    patches:
    - fromFieldPath: metadata.labels
  mode: Pipeline
  pipeline:
  - step: kcl
    functionRef:
      name: crossplane-contrib-function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      metadata:
        name: kubernetes
      spec:
        target: Default
        source: |+
          oxr = option("params").oxr
          _id = oxr.spec.id
          _params = oxr.spec.parameters
          dxr = {
              **oxr
              status.host = _params.host
          }

          schema providerConfig:
              _apiVersion: str
              _suffix: str
              apiVersion = _apiVersion
              kind = "ProviderConfig"
              metadata = {
                  name = _id + "-app"
                  annotations = {
                      "krm.kcl.dev/ready" = "True"
                      "krm.kcl.dev/composition-resource-name" = _id + "-provider-config-" + _suffix
                  }
              }
              spec = {
                  credentials.source = "InjectedIdentity"
              }

          _items = [
              providerConfig {
                  _apiVersion = "kubernetes.crossplane.io/v1alpha1"
                  _suffix = "kubernetes"
              } , {
                  apiVersion = "kubernetes.crossplane.io/v1alpha1"
                  kind = "Object"
                  metadata.name = "{}-deployment".format(_id)
                  spec = {
                      forProvider.manifest = {
                          apiVersion = "apps/v1"
                          kind = "Deployment"
                          metadata = {
                              name = _id
                              namespace = _params.namespace
                              labels = {
                                  "app.kubernetes.io/name" = _id
                              }
                          }
                          spec = {
                              selector.matchLabels = {
                                  "app.kubernetes.io/name" = _id
                              }
                              template = {
                                  metadata.labels = {
                                      "app.kubernetes.io/name" = _id
                                  }
                                  spec = {
                                      containers = [{
                                          image = _params.image + ":" + _params.tag
                                          name = "backend"
                                          livenessProbe = {
                                              httpGet = {
                                                  path = "/"
                                                  port = _params.port
                                              }
                                          }
                                          readinessProbe = {
                                              httpGet = {
                                                  path = "/"
                                                  port = _params.port
                                              }
                                          }
                                          resources = {
                                              limits = {cpu = "250m", memory = "256Mi" }
                                              requests = {cpu = "125m", memory = "128Mi" }
                                          }
                                          ports = [
                                              {containerPort = _params.port }
                                          ]
                                          if _params.db?.secret:
                                              env = [
                                                  {
                                                      name = "DB_ENDPOINT"
                                                      valueFrom.secretKeyRef = {
                                                          key = "endpoint"
                                                          name = _params.db.secret
                                                      }
                                                  }, {
                                                      name = "DB_PASSWORD"
                                                      valueFrom.secretKeyRef = {
                                                          key = "password"
                                                          name = _params.db.secret
                                                      }
                                                  }, {
                                                      name = "DB_PORT"
                                                      valueFrom.secretKeyRef = {
                                                          key = "port"
                                                          name = _params.db.secret
                                                          optional = True
                                                      }
                                                  }, {
                                                      name = "DB_USERNAME"
                                                      valueFrom.secretKeyRef = {
                                                          key = "username"
                                                          name = _params.db.secret
                                                      }
                                                  }, {
                                                      name = "DB_NAME"
                                                      value = _id
                                                  },
                                              ]
                                      }]
                                  }
                              }
                          }
                      }
                      providerConfigRef.name = _id + "-app"
                  }
              }, {
                  apiVersion = "kubernetes.crossplane.io/v1alpha1"
                  kind = "Object"
                  metadata.name = "{}-service".format(_id)
                  spec = {
                      forProvider.manifest = {
                          apiVersion = "v1"
                          kind = "Service"
                          metadata = {
                              name = _id
                              namespace = _params.namespace
                              labels = {
                                  "app.kubernetes.io/name" = _id
                              }
                          }
                          spec = {
                              type = "ClusterIP"
                              ports = [{
                                  port = _params.port
                                  targetPort = _params.port
                                  protocol = "TCP"
                                  name = "http"
                              }]
                              selector = {
                                  "app.kubernetes.io/name" = _id
                              }
                          }
                      }
                      providerConfigRef.name = _id + "-app"
                  }
              }, {
                  apiVersion = "kubernetes.crossplane.io/v1alpha1"
                  kind = "Object"
                  metadata.name = "{}-ingress".format(_id)
                  spec = {
                      forProvider.manifest = {
                          apiVersion = "networking.k8s.io/v1"
                          kind = "Ingress"
                          metadata = {
                              name = _id
                              namespace = _params.namespace
                              labels = {
                                  "app.kubernetes.io/name" = _id
                              }
                              annotations = {
                                  "ingress.kubernetes.io/ssl-redirect" = "false"
                                  "dev.okteto.com/generate-host" = "true"
                              }
                          }
                          spec = {
                              if _params.ingressClassName:
                                  ingressClassName = _params.ingressClassName
                              rules = [{
                                  host = _params.host
                                  http = {
                                      paths = [{
                                          path = "/"
                                          pathType = "ImplementationSpecific"
                                          backend.service = {
                                              name = _id
                                              port.number = _params.port
                                          }
                                      }]
                                  }
                              }]
                          }
                      }
                      providerConfigRef.name = _id + "-app"
                  }
              }
          ]

          if _params.scaling?.enabled:
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha1"
                  kind = "Object"
                  metadata.name = "{}-hpa".format(_id)
                  spec = {
                      forProvider.manifest = {
                          apiVersion = "autoscaling/v2"
                          kind = "HorizontalPodAutoscaler"
                          metadata = {
                              name = _id
                              namespace = _params.namespace
                              labels = {
                                  "app.kubernetes.io/name" = _id
                              }
                          }
                          spec = {
                              scaleTargetRef = {
                                  apiVersion = "apps/v1"
                                  kind = "Deployment"
                                  name = _id
                              }
                              minReplicas = _params.scaling.min
                              maxReplicas = _params.scaling.max
                              metrics = [{
                                  type = "Resource"
                                  resource = {
                                      name = "cpu"
                                      target = {
                                          type = "Utilization"
                                          averageUtilization = 80
                                      }
                                  }
                              }, {
                                  type = "Resource"
                                  resource = {
                                      name = "memory"
                                      target = {
                                          type = "Utilization"
                                          averageUtilization = 80
                                      }
                                  }
                              }]
                          }
                      }
                      providerConfigRef.name = _id + "-app"
                  }
              }]

          items = _items

  - step: kcl-ci
    functionRef:
      name: crossplane-contrib-function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      metadata:
        name: ci
      spec:
        target: Default
        source: |
          import template

          # oxrMock = {
          #   spec = {
          #     id = "123"
          #     parameters = {
          #       image = "IMAGE"
          #       repository = {
          #         enabled = True
          #         name = "REPO"
          #       }
          #       ci = {
          #         enabled = True
          #       }
          #     }
          #   }
          # }
          oxr = option("params").oxr
          _id = oxr.spec.id
          _params = oxr.spec.parameters
          dxr = {
            **oxr
            status.host = _params.host
          }

          schema RepositoryFile:
            apiVersion = "repo.github.upbound.io/v1alpha1"
            kind = "RepositoryFile"
            metadata: any
            spec: RepositoryFileSpec

          schema RepositoryFileSpec:
            forProvider: RepositoryFileForProvider

          schema RepositoryFileForProvider:
            branch = "${_id}-ci"
            commitAuthor = "Crossplane"
            commitEmail = "github-provider@crossplane.io"
            commitMessage = "${file} [skip ci]"
            file: str
            overwriteOnCreate = True
            repository = _params.repository.name
            content: str

          _metadata = lambda suffix: str, kind: str -> any {
            {
              if suffix == "":
                name = _id
                annotations = {
                  "krm.kcl.dev/composition-resource-name" = _id + "-" + kind
                }
              else:
                name = _id + "-" + kind + "-" + suffix
                annotations = {
                  "krm.kcl.dev/composition-resource-name" = _id + "-" + kind + "-" + suffix
                }
            }
          }

          _devboxRun = "devbox run --config devbox-ci.json -- ./dot.nu run ci $TAG"

          if not _params.ci?.runTests:
            _devboxRun = _devboxRun + " --run_tests false"
          if not _params.ci?.buildImages:
            _devboxRun = _devboxRun + " --build_images false"

          _items = []

          if _params.ci?.tool == "gha":
            _items += [
              RepositoryFile{
                metadata = _metadata("gha", "file")
                spec: RepositoryFileSpec{
                  forProvider: RepositoryFileForProvider{
                    file = ".github/workflows/ci.yaml"
                    content = template.execute("""\
          name: ci
          run-name: ci
          on:
            push:
              branches:
                - main
          jobs:
            all:
              runs-on: ubuntu-latest
              env:
                TAG: 0.0.$[[ github.run_number ]]
                FORCE_COLOR: 1
              steps:
                - name: Checkout
                  uses: actions/checkout@v4
                - name: Set up QEMU
                  uses: docker/setup-qemu-action@v3
                - name: Login to ghcr
                  uses: docker/login-action@v3
                  with:
                    registry: ghcr.io
                    username: vfarcic
                    password: $[[ secrets.REGISTRY_PASSWORD ]]
                - name: Install devbox
                  uses: jetify-com/devbox-install-action@v0.11.0
                  with:
                    project-path: devbox-ci.json
                - name: All
                  run: |
                    {{devboxRun}}
                  env:
                    REGISTRY_PASSWORD: $[[ secrets.REGISTRY_PASSWORD ]]
                - name: Commit changes
                  run: |
                    git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
                    git config --local user.name "github-actions[bot]"
                    git add .
                    git commit -m "Release $[[ env.TAG ]] [skip ci]"
                - name: Push changes
                  uses: ad-m/github-push-action@master
                  with:
                    github_token: $[[ secrets.GITHUB_TOKEN ]]
                    branch: $[[ github.ref ]]
          """, { devboxRun: _devboxRun }).replace("[[", "{{").replace("]]", "}}")
                  }
                }
              },
              RepositoryFile{
                metadata = _metadata("gha-port", "file")
                spec: RepositoryFileSpec{
                  forProvider: RepositoryFileForProvider{
                    file = ".github/workflows/sync-control-plane-direct.yml"
                    content = """\
          name: Sync control plane
          permissions:
            contents: write
          on:
            workflow_dispatch:
              inputs:
                operation:
                  required: true
                  description: "Delete, Update or create"
                  type: string
                triggeringUser:
                  required: true
                  description: "The email of the triggering user"
                  type: string
                runId:
                  required: true
                  description: "Port's Run ID"
                  type: string
                manifest:
                  required: true
                  description: "The K8s manifest generated by Port"
                  type: string
                folder:
                  required: true
                  description: Folder where the resource will be stored
                  default: "./apps"
                  type: string
          jobs:
            push:
              runs-on: ubuntu-latest
              steps:
                - name: checkout
                  uses: actions/checkout@v2
                - uses: mikefarah/yq@v4.44.1
                - uses: port-labs/port-github-action@v1
                  with:
                    clientId: $[[ secrets.PORT_CLIENT_ID ]]
                    clientSecret: $[[ secrets.PORT_CLIENT_SECRET ]]
                    operation: PATCH_RUN
                    runId: $[[ inputs.runId ]]
                    icon: GithubActions
                    logMessage: "$[[ inputs.operation ]] manifest $[[ env.PATH ]]..."
                - name: manifest
                  run: |
                    echo '$[[ inputs.manifest ]]' | yq -p json -o yaml | tee tmp.yaml
                    kind=$(yq .kind tmp.yaml)
                    name=$(yq .metadata.name tmp.yaml)
                    namespace=$(yq .spec.parameters.namespace tmp.yaml)
                    path=$[[ inputs.folder ]]/$namespace-$kind-$name.yaml
                    if [ "$[[ inputs.operation ]]" = "DELETE" ]; then
                      rm -f $path
                      rm -f tmp.yaml
                    else
                      mv tmp.yaml $path
                    fi
                - name: Push
                  env:
                    GITHUB_TOKEN: $[[ secrets.GITHUB_TOKEN ]]
                  run: |
                    git config user.name "GitHub Action"
                    git config user.email "github-actions[bot]@users.noreply.github.com"
                    git add .
                    git commit -m "chore: $[[ inputs.operation ]] resource by $[[ inputs.triggeringUser ]]"
                    git push
          """.replace("[[", "{{").replace("]]", "}}")
                  }
                }
              },
            ]

          if _params.ci?.enabled and _params.repository?.enabled and _params.repository?.name:
            _items += [
              {
                apiVersion = "repo.github.upbound.io/v1alpha1"
                kind = "Branch"
                metadata = _metadata("ci", "branch")
                spec.forProvider = {
                  branch = "${_id}-ci"
                  repository = _params.repository.name
                }
              },
              RepositoryFile{
                metadata = _metadata("dot-nu", "file")
                spec: RepositoryFileSpec{
                  forProvider: RepositoryFileForProvider{
                    file = "dot.nu"
                    content = template.execute("""\
          \#!/usr/bin/env nu

          def main [] {}

          \# Runs all CI tasks
          def "main run ci" [
              tag: string # The tag of the image (e.g., 0.0.1)!
              manifest = "apps/{{id}}.yaml" # The path to the manifest file
              --run_tests = true # Whether to run tests
              --build_images = true # Whether to build images
          ] {

              if $run_tests {
                  main run tests --language go
              }

              if $build_images {
                  main build image $tag
              }

              main update claim $tag $manifest

          }

          \# Runs tests
          def "main run tests" [
              --language = "go" # The language of the project (e.g., go)
          ] {

              if $language == "go" {
                  go test -v $"(pwd)/..."
              }

          }

          \# Builds and (optionally) pushes container images
          def "main build image" [
              tag: string   # The tag of the image (e.g., 0.0.1)
              --push = true # Whether to push the image to the registry
          ] {

              docker image build --tag $"{{image}}:latest" .

              docker image tag $"{{image}}:latest" $"{{image}}:($tag)"

              if $push {

                  docker image push $"{{image}}:latest"

                  docker image push $"{{image}}:($tag)"
              }

          }

          \# Updates the claim
          def "main update claim" [
              tag: string # The tag of the image (e.g., 0.0.1)
              path = "apps/{{id}}.yaml" # The path to the claim file
          ] {

              open $path | upsert spec.parameters.tag $tag | save $path --force

          }
          """, {
            image: _params.image,
            id: _id
          }).replace("\#", "#")
                  }
                }
              },
              RepositoryFile{
                metadata = _metadata("devbox", "file")
                spec: RepositoryFileSpec{
                  forProvider: RepositoryFileForProvider{
                    file = "devbox-ci.json"
                    content = """\
          {
            "packages": [
              "nushell@0.100.0",
              "go@1.22.3"
            ],
            "shell": {
              "init_hook": [
                "chmod +x dot.nu"
              ],
              "scripts":   {}
            }
          }
          """
                  }
                }
              },
              RepositoryFile{
                metadata = _metadata("dockerfile", "file")
                spec: RepositoryFileSpec{
                  forProvider: RepositoryFileForProvider{
                    file = "Dockerfile"
                    content = """\
          FROM golang:1.23.3-alpine AS build
          RUN mkdir /src
          WORKDIR /src
          ADD ./go.mod .
          ADD ./go.sum .
          ADD ./*.go ./
          RUN GOOS=linux GOARCH=amd64 go build -o app
          RUN chmod +x app

          FROM scratch
          ARG VERSION
          ENV VERSION=$VERSION
          ENV DB_PORT=5432 DB_USERNAME=postgres DB_NAME=my-db
          COPY --from=build /src/app /usr/local/bin/app
          EXPOSE 8080
          CMD ["app"]
          """
                  }
                }
              }, {
                  apiVersion = "repo.github.upbound.io/v1alpha1"
                  kind = "PullRequest"
                  metadata = _metadata("", "pull-request")
                  spec.forProvider = {
                      baseRef = "main"
                      headRef = "${_id}-ci"
                      body = "Review, merge, enjoy."
                      title = "CI"
                      baseRepository = _params.repository.name
                  }
              }
            ]

          items = _items
  - step: automatically-detect-ready-composed-resources
    functionRef:
      name: crossplane-contrib-function-auto-ready
